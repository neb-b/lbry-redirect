package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"os"
	"strings"

	assetfs "github.com/elazarl/go-bindata-assetfs"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _static_index_html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\x7f\x6f\xdb\x36\x10\xfd\xdf\x9f\xe2\xca\x76\x80\x8d\xe9\x87\x9d\x36\x41\x2a\x4b\x2e\xb2\x34\x45\x07\x6c\x58\x51\x37\xc0\x0a\xec\x8f\x52\xe4\xc9\xe2\x42\x91\x2a\x75\x72\xec\x15\xf9\xee\x83\x24\x5b\x52\x13\x6f\xb5\x01\x4b\xc7\xe3\x7b\x7a\xef\xee\x28\xc7\xcf\xde\xfe\x71\xfd\xe9\xf3\x87\x1b\xc8\xa9\xd0\xab\x49\xdc\x5c\x40\x73\xb3\x49\x18\x1a\xb6\x9a\x00\xc4\x39\x72\xd9\xdc\x00\xc4\x05\x12\x07\x91\x73\x57\x21\x25\xec\xf6\xd3\x3b\xff\x92\x41\x38\x4e\x1a\x5e\x60\xc2\xb6\x0a\xef\x4b\xeb\x88\x81\xb0\x86\xd0\x50\xc2\xee\x95\xa4\x3c\x91\xb8\x55\x02\xfd\x36\xf0\x40\x19\x45\x8a\x6b\xbf\x12\x5c\x63\xb2\x08\xe6\x8f\xc8\x72\xa2\xd2\xc7\xaf\xb5\xda\x26\xec\x4f\xff\xf6\xca\xbf\xb6\x45\xc9\x49\xa5\x1a\x47\xcc\x0a\x13\x94\x1b\x1c\xb0\xa4\x48\xe3\xea\xb3\xad\xa9\x4e\x11\x3e\xa2\x54\x0e\x05\xc5\x61\xb7\x3e\xe9\x36\x55\xb4\x6f\x02\x68\x3f\xa9\x95\x7b\xf8\x76\x08\x00\x52\x2e\xee\x36\xce\xd6\x46\xfa\xc2\x6a\xeb\x22\x78\x9e\xbd\x6e\xbe\xcb\x7e\x0b\xe1\x8e\x7c\xae\xd5\xc6\x44\x20\xd0\x10\xba\x21\x97\x59\x43\x7e\xc6\x0b\xa5\xf7\x11\xf8\xbc\x2c\x35\xfa\xd5\xbe\x22\x2c\x3c\xf8\x45\x2b\x73\xf7\x3b\x17\xeb\x36\x7e\x67\x0d\x79\xc0\xd6\xb8\xb1\x08\xb7\xbf\x32\x0f\x3e\xda\xd4\x92\xf5\xe0\x3d\xea\x2d\x92\x12\xdc\x83\x2b\xa7\xb8\xf6\x7a\x76\x80\x8a\x9b\xca\xaf\xd0\xa9\xcc\x03\x76\xd5\xd0\xc3\x75\x23\x13\x6e\x0a\xfb\xb7\x62\x23\xc2\x13\x2b\xeb\x7d\x91\x5a\xcd\x06\xb5\x25\x97\x52\x99\x4d\x04\x2f\xb1\x38\xae\x3e\x4c\x0e\x37\xf9\x62\x54\x96\xd6\x57\xa5\xfe\xc1\x08\x2e\x5e\x95\xbb\x27\x9b\x83\xa6\x25\x5c\x19\x74\x23\x50\xc1\x77\x5d\xbb\x23\xb8\x9c\xcf\x07\x54\x93\x71\x1b\x65\x22\xe0\x35\xd9\x27\x72\x7c\xb2\x65\x04\x8b\xf9\x09\x4d\x81\x32\x65\x4d\xe3\x76\x59\x27\xd1\x45\xb0\x28\x77\x50\x59\xad\x24\x3c\x97\x52\x2e\x1f\xe5\x7d\xc7\xa5\xaa\xab\x08\xce\xc7\x22\x4e\xb5\x3a\xcb\x96\xa7\x3c\x9f\xbd\x1a\x03\x0f\x9e\x16\xf3\xf9\x4f\xcb\x53\x66\x2f\xc6\x66\x7b\xed\x69\x4d\x64\xcd\x48\xbb\x54\x55\xa9\xf9\x3e\x82\x54\x5b\x71\xf7\xa3\xe2\x74\xab\x5d\x6d\xce\x86\xd2\xfc\xbf\xc5\xbe\xc1\x0b\x37\x86\xfc\x87\xb3\x47\x52\xa3\xdc\x6e\xbf\xeb\xe7\xd3\x82\xb9\x4d\x3a\x5d\x5c\x5c\x7a\x70\xf6\xf2\xb5\x07\x67\xe7\xe7\xb3\x81\xab\xf9\x8d\xc3\xfe\xac\xc5\xe1\xf1\x65\x12\x37\x47\xee\x70\x5e\xa5\xda\x82\xd0\xbc\xaa\x12\xd6\x4f\x10\x3b\x1e\xcd\x38\x5f\xac\xde\xd7\xf9\x9b\x38\xcc\x17\xfd\x5a\x66\x5d\x01\x4a\x26\xac\x42\xee\x44\xee\x37\x71\x8f\x00\x88\xbb\x09\xa1\x7d\x89\x09\x6b\x4e\x2a\x1b\x6f\x6e\x93\xec\xf8\xc4\x43\x14\xae\x26\x03\xfc\xd0\xa5\x0e\x5f\xd5\x69\xa1\x88\xad\xd6\x2d\x3a\x0e\xbb\x64\x2f\x25\x6c\x9e\x7d\x30\x12\x4a\xb5\xed\xdf\x2f\xc2\xa9\x92\x8e\xdb\x84\x35\x15\x41\x2b\x3b\x01\x69\x45\x5d\xa0\xa1\xe0\x6b\x8d\x6e\xbf\x46\x8d\x82\xac\x9b\xb2\xe7\x63\x37\x7d\x11\x3b\x68\xe7\xe8\xc7\xd8\xce\x4e\x0f\x6e\xa8\x02\x2e\xe5\xcd\x16\x0d\xfd\xa6\x2a\x42\x83\x6e\x7a\xf4\xe4\x41\xce\x8d\xd4\xb8\x6e\xc3\xd9\xf2\x58\x82\xac\x36\x82\x94\x35\xdf\xa5\xa7\x38\x1b\x8d\x01\x36\x84\x41\xe9\xda\xeb\x5b\xcc\x78\xad\x69\x3a\x1b\xa6\xab\x53\xbd\xe5\xba\x46\x48\x3a\xf5\x41\x1b\x2d\x87\x3a\xab\x0c\xa6\xcf\xda\xc5\x31\x33\x80\x43\xaa\x9d\x19\xb8\x1e\x26\x8f\x68\x6b\xa7\x3f\x38\xcc\xd4\x0e\x12\xb8\x57\x46\xda\xfb\x40\x5b\xc1\x1b\xc9\x41\xee\x30\x0b\x1c\x96\x9a\x0b\x9c\x86\x7f\x85\x2f\x42\x0f\x18\x9b\x8d\x1e\x7b\x0a\x01\xc9\x88\xf4\x67\xf8\x12\x76\xe5\x7c\xd3\x56\x39\x79\xf1\xad\x55\xf9\xf0\xe5\xc9\x60\xf7\x4d\x8e\xc3\x6e\xa0\xe3\xb0\xfb\x23\xfd\x37\x00\x00\xff\xff\x9f\x46\x28\xfb\x59\x07\x00\x00")

func static_index_html() ([]byte, error) {
	return bindata_read(
		_static_index_html,
		"static/index.html",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"static/index.html": static_index_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"static": &_bintree_t{nil, map[string]*_bintree_t{
		"index.html": &_bintree_t{static_index_html, map[string]*_bintree_t{}},
	}},
}}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
